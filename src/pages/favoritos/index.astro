---
import IconDelete from "@/components/preact/Icons/DeleteIcon";
import type { APIResponsePropertyDetail } from "@/interfaces/detail.properties.interface";
import Layout from "@/layouts/Layout.astro";
import { getEntrepreneurshipById } from "@/services/get-all-entrepreneurship";
import { fetchData } from "@/utils/fetch-data";
import { capitalize } from "@/utils/formats";
import he from "he";

// DB Astro
const resFav = await fetch(`${Astro.url.origin}/api/favorites/1.json`); // Reemplazar el 1 por el id del usuario logeado
const favoritesIds = await resFav.json();
let favoritesUser: {
  id: string;
  title: string;
  image: string;
}[] = [];

for (let i = 0; i < favoritesIds.data.length; i++) {
  if (favoritesIds.data[i].isEntrepreneurshipPublic) {
    // Fetchea al endpoint de emprendimientos y lo une a mi array de favoritos
    const data = await getEntrepreneurshipById(
      favoritesIds.data[i].publicationId
    );

    favoritesUser.push({
      id: data.emprendimiento[0].ed_idl,
      title: capitalize(data.emprendimiento[0].titulo),
      image: data.emprendimiento[0].img_princ,
    });
  } else {
    // Obtiene la propiedad del endpoint de propiedades y la une a mi array de favoritos
    const data = await fetchData<APIResponsePropertyDetail>(
      "fichas.propiedades",
      {
        id: favoritesIds.data[i].publicationId,
        suc: favoritesIds.data[i].publicationSuc,
      }
    );

    favoritesUser.push({
      id: data.resultado.ficha[0].in_fic,
      title: capitalize(
        he.decode(
          `${data.resultado.ficha[0].in_cal} ${data.resultado.ficha[0].in_nro} - ${data.resultado.ficha[0].in_tip} en ${data.resultado.ficha[0].in_loc} ${data.resultado.ficha[0].in_bar}`
        )
      ),
      image: data.resultado?.ficha[0].img_princ,
    });
  }
}

const title = "Favoritos - Matías Szpira Bienes Raíces ";
const description =
  "Tus propiedades favoritas en un solo lugar. Matías Szpira Bienes Raíces te ofrece la posibilidad de guardar tus propiedades favoritas para que puedas verlas cuando quieras. No te pierdas esta oportunidad de invertir en USA con Matías Szpira Bienes Raíces";
---

<Layout title={title} description={description}>
  <article class="bg-secondary-bg-msb h-full font-gotham">
    <section class="container mx-auto">
      <div class="py-12">
        <h1 class="text-lg text-black font-bold text-center uppercase">
          Favoritos
        </h1>
        <p class="text-center">Administrá tus propiedades guardadas</p>
      </div>
    </section>
    <section class="container mx-auto flex justify-between">
      <!-- Checkbox Selecionar todos  -->
      <div class="flex items-center">
        <input
          type="checkbox"
          class="custom-checkbox form-checkbox h-5 w-5 text-primary-msb"
          id="select-all"
        />
        <label for="select-all" class="ml-2 text-black">Seleccionar todos</label
        >
      </div>
      <!-- Botone Eliminar -->
      <button
        id="btn-delete"
        disabled={favoritesUser.length === 0}
        class="bg-primary-msb text-white px-4 py-2 rounded-lg flex items-center gap-2 font-semibold "
      >
        <IconDelete class={"size-6"} />
        Eliminar
      </button>
    </section>
    <section>
      {
        favoritesUser.length == 0 ? (
          <div class="container mx-auto flex justify-center items-center h-96">
            <p class="text-black text-center">No hay propiedades guardadas</p>
          </div>
        ) : (
          <p class="text-black text-center font-bold py-3 font-gotham text-2xl">
            {favoritesUser.length} propiedades agregadas
          </p>
        )
      }
    </section>
    <section>
      <!-- List of map User card of properti with check and delete btn -->
      <div
        class="container mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
      >
        <!-- Card -->

        {
          favoritesUser.map(
            (favProp: { id: string; title: string; image: string }) => (
              <div class="bg-white rounded-lg shadow-lg">
                <div class="relative justify-center">
       
                  <input
                    type="checkbox"
                    data-check-prop="checked-prop"
                    class="absolute top-2 left-2 form-checkbox h-5 w-5 text-primary-msb custom-checkbox"
                    id={favProp.id}
                  />
                  <button
                    id={`btn-delete-prop`}
                    data-idProp={favProp.id}
                    class=" absolute top-2 right-2  bg-white text-black px-2 py-1 rounded-lg"
                  >
                  <IconDelete class={"size-6"} />
                  </button>
                  <img
                    src={favProp.image}
                    alt={favProp.title}
                    class="w-full h-48 object-cover rounded-t-lg"
                  />
                </div>
                <div class="p-4">
                  <h2 class="text-lg text-black font-bold">{favProp.title}</h2>
                
                  <div class="flex justify-end items-end mt-4">
                    
                 
                  </div>
                </div>
              </div>
            )
          )
        }
      </div>
    </section>
  </article>
</Layout>

<style>
.custom-checkbox:checked {
  background-color: #10B981 !important; /* Este es el color verde-500 en Tailwind */
  border-color: #10B981 !important; /* Este es el color verde-500 en Tailwind */
}
</style>
  
<script>
  /* Delete all selection and fetch API /api/favorites/idselected */
  document.addEventListener("astro:page-load", (event) => {
  const btnDelete = document.getElementById("btn-delete") as HTMLButtonElement;
  const selectAll = document.getElementById("select-all") as HTMLInputElement;
  const checkboxes = document.querySelectorAll(
    "input[data-check-prop]"
  ) as NodeListOf<HTMLInputElement>;
    const deleteButtons = document.querySelectorAll(
    "button[id=btn-delete-prop]"
  ) as NodeListOf<HTMLButtonElement>;


  let ids = Array.from(checkboxes).map((checkbox) => checkbox.id);

  selectAll.addEventListener("change", (e) => {
    checkboxes.forEach((checkbox) => {
      checkbox.checked = selectAll.checked;
    });
    if (selectAll.checked) {
      ids = Array.from(checkboxes).map((checkbox) => checkbox.id);
    } else {
      ids = [];
    }
  });

  checkboxes.forEach((checkbox) =>
    checkbox.addEventListener("change", (e) => {
      if (checkbox.checked) {
        ids.push(checkbox.id);
      } else {
        ids = ids.filter((id) => id !== checkbox.id);
      }
    })
  );

  deleteButtons.forEach((button) =>
    button.addEventListener("click", async (e) => {
      const id = button.getAttribute("data-idProp");
      const res = await fetch(`/api/favorites/1.json`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ ids: [id] }),
      });

      if (res.ok) {
        location.reload();
      } else {
        alert("Error al eliminar la propiedad");
      }
    })
  );

  btnDelete.addEventListener("click", async () => {
    if (ids.length === 0) {
      alert("No hay elementos seleccionados");
      return;
    }

    const res = await fetch(`/api/favorites/1.json`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ ids }),
    });

    if (res.ok) {
      location.reload();
    } else {
      alert("Error al eliminar los elementos seleccionados");
    }
  });
});
</script>
